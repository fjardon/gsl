/*---------------------------------------------------------------------------*
 *  ggpars.d - LIBERO dialog data definitions for ggpars.c.                  *
 *  Generated by LIBERO 2.4 on 11 Oct, 2010, 17:16.                          *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define abort_event                     0
#define after_event                     1
#define allow_arguments_event           2
#define allow_identifier_event          3
#define allow_locator_event             4
#define allow_macro_args_event          5
#define allow_number_event              6
#define allow_operand_event             7
#define anomaly_event                   8
#define append_event                    9
#define arithmetic_assign_event         10
#define as_event                        11
#define before_event                    12
#define by_event                        13
#define close_event                     14
#define close_bracket_event             15
#define close_comment_event             16
#define comment_event                   17
#define continue_comment_event          18
#define continue_data_specifier_event   19
#define copy_event                      20
#define default_operator_event          21
#define define_event                    22
#define delete_event                    23
#define direct_event                    24
#define echo_event                      25
#define else_event                      26
#define elsif_event                     27
#define end_for_event                   28
#define end_function_event              29
#define end_if_event                    30
#define end_macro_event                 31
#define end_new_event                   32
#define end_of_file_event               33
#define end_of_line_event               34
#define end_scope_event                 35
#define end_template_event              36
#define end_while_event                 37
#define error_event                     38
#define expect_data_specifier_event     39
#define expect_identifier_event         40
#define expect_number_event             41
#define expect_operand_event            42
#define expect_string_event             43
#define expect_substitute_event         44
#define expression_event                45
#define extend_event                    46
#define for_event                       47
#define format_event                    48
#define from_event                      49
#define function_event                  50
#define gsl_event                       51
#define if_event                        52
#define include_event                   53
#define incoming_event                  54
#define invoke_event                    55
#define last_event                      56
#define line_event                      57
#define literal_event                   58
#define macro_event                     59
#define member_event                    60
#define move_event                      61
#define new_event                       62
#define next_event                      63
#define next_arg_event                  64
#define no_bracket_event                65
#define noalias_event                   66
#define nostack_event                   67
#define number_event                    68
#define open_event                      69
#define open_bracket_event              70
#define open_comment_event              71
#define operator_event                  72
#define other_event                     73
#define output_event                    74
#define point_event                     75
#define pretty_event                    76
#define quote_event                     77
#define return_event                    78
#define save_event                      79
#define scope_event                     80
#define script_event                    81
#define shutdown_event                  82
#define sign_event                      83
#define simple_assign_event             84
#define sort_event                      85
#define spaces_event                    86
#define substitute_event                87
#define template_event                  88
#define text_event                      89
#define to_event                        90
#define unary_operator_event            91
#define where_event                     92
#define while_event                     93
#define xml_event                       94
#define _LR_STATE_after_init            0
#define _LR_STATE_allow_text            1
#define _LR_STATE_continue_comment      2
#define _LR_STATE_expect_signed_number  3
#define _LR_STATE_expect_unsigned_number 4
#define _LR_STATE_allow_number          5
#define _LR_STATE_expect_string         6
#define _LR_STATE_continue_string       7
#define _LR_STATE_expect_identifier     8
#define _LR_STATE_continue_identifier   9
#define _LR_STATE_expect_bracketed_identifier 10
#define _LR_STATE_continue_bracketed_identifier 11
#define _LR_STATE_allow_identifier      12
#define _LR_STATE_expect_data_specifier 13
#define _LR_STATE_continue_data_specifier 14
#define _LR_STATE_after_member          15
#define _LR_STATE_after_member_expression 16
#define _LR_STATE_after_member_as       17
#define _LR_STATE_after_scope_point     18
#define _LR_STATE_expect_substitute     19
#define _LR_STATE_expect_modifier       20
#define _LR_STATE_expect_operand        21
#define _LR_STATE_after_sign            22
#define _LR_STATE_after_sign_point      23
#define _LR_STATE_after_point           24
#define _LR_STATE_after_number          25
#define _LR_STATE_after_number_point    26
#define _LR_STATE_allow_operand         27
#define _LR_STATE_allow_arguments       28
#define _LR_STATE_continue_arguments    29
#define _LR_STATE_allow_operator        30
#define _LR_STATE_expect_script         31
#define _LR_STATE_expect_end_of_line    32
#define _LR_STATE_expect_assign         33
#define _LR_STATE_expect_assign_or_args 34
#define _LR_STATE_allow_macro_args      35
#define _LR_STATE_after_open_macro_args 36
#define _LR_STATE_continue_macro_args   37
#define _LR_STATE_expect_source         38
#define _LR_STATE_expect_terminator     39
#define _LR_STATE_expect_direct         40
#define _LR_STATE_continue_direct       41
#define _LR_STATE_allow_locator         42
#define _LR_STATE_expect_save           43
#define _LR_STATE_expect_new            44
#define _LR_STATE_expect_for            45
#define _LR_STATE_expect_scope          46
#define _LR_STATE_defaults              47
#define _LR_STATE_exceptions            48
#define _LR_defaults_state              47


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE read_script_line             (THREAD *thread);
MODULE generate_script_exception    (THREAD *thread);
MODULE insert_line_node             (THREAD *thread);
MODULE ready_for_op1_field          (THREAD *thread);
MODULE get_template_token           (THREAD *thread);
MODULE generate_comment_exception   (THREAD *thread);
MODULE generate_line_exception      (THREAD *thread);
MODULE get_script_command_token     (THREAD *thread);
MODULE call_expect_operand          (THREAD *thread);
MODULE get_expression_token         (THREAD *thread);
MODULE insert_comment_node          (THREAD *thread);
MODULE return_ok_feedback           (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE rollback_memory_allocations  (THREAD *thread);
MODULE return_eof_feedback          (THREAD *thread);
MODULE insert_text_node             (THREAD *thread);
MODULE count_token_width            (THREAD *thread);
MODULE call_expect_substitute       (THREAD *thread);
MODULE insert_spaces_only_node      (THREAD *thread);
MODULE set_extend_flag              (THREAD *thread);
MODULE return_to_root_node          (THREAD *thread);
MODULE dialog_return                (THREAD *thread);
MODULE get_comment_token            (THREAD *thread);
MODULE save_the_sign                (THREAD *thread);
MODULE call_continue_comment        (THREAD *thread);
MODULE rewind_token                 (THREAD *thread);
MODULE push_quote_character         (THREAD *thread);
MODULE insert_literal_node          (THREAD *thread);
MODULE get_quoted_token             (THREAD *thread);
MODULE return_to_string             (THREAD *thread);
MODULE return_to_parent             (THREAD *thread);
MODULE get_bracketed_identifier_token (THREAD *thread);
MODULE call_expect_identifier       (THREAD *thread);
MODULE call_expect_number           (THREAD *thread);
MODULE restore_the_sign             (THREAD *thread);
MODULE copy_the_operator            (THREAD *thread);
MODULE insert_attribute_node        (THREAD *thread);
MODULE ready_for_scope_field        (THREAD *thread);
MODULE insert_empty_text_node       (THREAD *thread);
MODULE insert_member_node           (THREAD *thread);
MODULE ready_for_name_field         (THREAD *thread);
MODULE call_allow_identifier        (THREAD *thread);
MODULE return_to_data_specifier     (THREAD *thread);
MODULE ready_for_before_field       (THREAD *thread);
MODULE ready_for_as_field           (THREAD *thread);
MODULE ready_for_op2_field          (THREAD *thread);
MODULE get_modifier_token           (THREAD *thread);
MODULE insert_empty_node_if_needed  (THREAD *thread);
MODULE call_expect_string           (THREAD *thread);
MODULE insert_unary_operator_node   (THREAD *thread);
MODULE insert_number_node           (THREAD *thread);
MODULE insert_symbol_node           (THREAD *thread);
MODULE call_expect_data_specifier   (THREAD *thread);
MODULE separate_name_from_scope     (THREAD *thread);
MODULE call_allow_arguments         (THREAD *thread);
MODULE add_one_bracket              (THREAD *thread);
MODULE call_continue_data_specifier (THREAD *thread);
MODULE change_number_to_symbol_node (THREAD *thread);
MODULE return_to_expression         (THREAD *thread);
MODULE change_to_call_node          (THREAD *thread);
MODULE call_allow_operand           (THREAD *thread);
MODULE insert_operator_node         (THREAD *thread);
MODULE return_to_arguments          (THREAD *thread);
MODULE close_one_bracket            (THREAD *thread);
MODULE insert_close_node            (THREAD *thread);
MODULE insert_else_node             (THREAD *thread);
MODULE insert_end_if_node           (THREAD *thread);
MODULE insert_end_for_node          (THREAD *thread);
MODULE insert_end_scope_node        (THREAD *thread);
MODULE insert_end_macro_node        (THREAD *thread);
MODULE insert_end_function_node     (THREAD *thread);
MODULE insert_end_new_node          (THREAD *thread);
MODULE insert_end_while_node        (THREAD *thread);
MODULE insert_output_node           (THREAD *thread);
MODULE insert_append_node           (THREAD *thread);
MODULE insert_echo_node             (THREAD *thread);
MODULE insert_abort_node            (THREAD *thread);
MODULE insert_define_node           (THREAD *thread);
MODULE get_script_token             (THREAD *thread);
MODULE insert_macro_node            (THREAD *thread);
MODULE call_allow_macro_args        (THREAD *thread);
MODULE insert_function_node         (THREAD *thread);
MODULE insert_return_node           (THREAD *thread);
MODULE insert_call_node             (THREAD *thread);
MODULE insert_gsl_node              (THREAD *thread);
MODULE insert_direct_node           (THREAD *thread);
MODULE insert_xml_node              (THREAD *thread);
MODULE call_allow_locator           (THREAD *thread);
MODULE insert_template_node         (THREAD *thread);
MODULE call_allow_number            (THREAD *thread);
MODULE insert_end_template_node     (THREAD *thread);
MODULE insert_save_node             (THREAD *thread);
MODULE insert_if_node               (THREAD *thread);
MODULE insert_elsif_node            (THREAD *thread);
MODULE insert_move_node             (THREAD *thread);
MODULE insert_copy_node             (THREAD *thread);
MODULE insert_delete_node           (THREAD *thread);
MODULE insert_new_node              (THREAD *thread);
MODULE insert_for_node              (THREAD *thread);
MODULE insert_scope_node            (THREAD *thread);
MODULE insert_while_node            (THREAD *thread);
MODULE insert_next_node             (THREAD *thread);
MODULE insert_last_node             (THREAD *thread);
MODULE insert_sort_node             (THREAD *thread);
MODULE get_direct_quoted_token      (THREAD *thread);
MODULE ready_for_to_field           (THREAD *thread);
MODULE ready_for_after_field        (THREAD *thread);
MODULE unset_stacked_flag           (THREAD *thread);
MODULE signal_unexpected_end_of_file (THREAD *thread);
MODULE return_error_feedback        (THREAD *thread);
MODULE signal_invalid_token         (THREAD *thread);
MODULE insert_substitute_node       (THREAD *thread);
MODULE signal_internal_error        (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [49][95] =
{
    { 0,0,28,12,42,35,5,27,0,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,13,8,3,21,6,19,32,0,0,0,0,0,31,0,0
     ,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0
     ,0,0,0,0,0,1,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,1,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,1,0,0,0,1,13,8,3,21,6,19,0,1,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,1,0,1,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,2,0,0,0,0,0,0,0,2,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,2,0,0,0,2,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,2,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,3,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,3,13,8,3,21,6,19,0,3,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0
     ,0,3,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,4,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,4,13,8,3,21,6,19,0,4,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,4,0,0,0,0,0,0,0,0
    },
    { 5,5,28,12,42,35,5,27,5,5,5,5,5,5,5,5,5,5,2,14,5,5,5,5,5,5,5
     ,5,5,5,5,5,5,5,5,5,5,5,5,13,8,5,21,6,19,5,5,5,5,5,5,5,5,5,5
     ,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5
     ,5,5,5,5,5,5,5,5,5,5
    },
    { 0,0,28,12,42,35,5,27,6,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,6,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,7,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,7,0,0,0,7,13,8,3,21,6,19,0,7,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0
     ,0,0,7,0,7,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,8,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,8,13,8,3,21,6,19,0,8,0,0,0,0,0,0,0,0
     ,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,8,9,0,0,0,0,0,0,0
    },
    { 9,9,28,12,42,35,5,27,9,9,9,9,9,9,9,9,9,9,2,14,9,9,9,9,9,9,9
     ,9,9,9,9,9,9,9,9,9,9,9,9,13,8,3,21,6,19,9,9,9,9,9,9,9,9,9,9
     ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
     ,9,9,9,9,9,9,9,9,9,9
    },
    { 0,0,28,12,42,35,5,27,10,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,10,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,11,0,0,0,0,0,0,11,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,11,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0
    },
    { 12,12,28,12,42,35,5,27,12,12,12,12,12,12,12,12,12,12,2,14,12
     ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12
     ,3,21,6,19,12,12,12,12,12,12,12,12,12,12,12,12,12,9,12,12,12
     ,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12
     ,12,12,12,12,12,9,12,12,12,12,12,12,12
    },
    { 13,13,28,12,42,35,5,27,13,13,13,13,13,13,13,13,13,13,2,13,13
     ,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8
     ,3,21,6,19,13,13,13,13,13,13,13,13,13,13,13,13,13,14,13,15
     ,13,13,13,13,13,13,13,14,13,14,13,13,13,13,18,13,13,13,13,13
     ,13,13,14,13,13,13,14,13,13,13,13,13,13,13
    },
    { 14,14,28,12,42,35,5,27,14,14,14,14,14,14,14,14,14,14,2,14,14
     ,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,8
     ,3,21,6,19,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15
     ,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,14,14,14,14,14
     ,14,14,14,14,14,14,14,14,14,14,14,14,14,14
    },
    { 14,14,28,12,42,35,5,27,15,14,14,14,14,14,14,14,14,14,2,14,14
     ,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,13,8
     ,3,21,6,19,14,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14
     ,14,14,14,14,14,14,14,14,16,14,15,14,14,14,14,14,14,14,14,14
     ,14,14,14,14,14,15,14,14,14,14,14,14,14,14
    },
    { 0,0,28,12,42,35,5,27,16,0,0,0,0,0,14,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,16,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,17,0,0,0,0,0,14,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,17,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0
    },
    { 18,18,28,12,42,35,5,27,18,18,18,18,18,18,18,18,18,18,2,14,18
     ,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,8
     ,3,21,6,19,18,18,18,18,18,18,18,18,18,18,18,18,18,14,18,18
     ,18,18,18,18,18,18,18,18,18,14,18,18,18,18,18,18,18,18,18,18
     ,18,18,18,18,18,18,14,18,18,18,18,18,18,18
    },
    { 0,0,28,12,42,35,5,27,19,0,0,0,0,0,19,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,19,13,8,3,21,6,19,0,19,0,20,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0
    },
    { 19,19,28,12,42,35,5,27,20,19,19,19,19,19,19,19,19,19,2,14,19
     ,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,13,8
     ,3,21,6,19,19,20,19,19,19,19,19,19,19,19,19,19,19,19,19,19
     ,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
     ,19,19,19,19,19,19,20,19,20,19,19,19,19,19
    },
    { 0,0,28,12,42,35,5,27,21,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,21,13,8,3,21,6,19,0,21,0,0,0,0,0,0,0
     ,0,0,0,0,30,0,30,0,0,0,0,0,0,0,25,21,30,21,0,0,0,24,0,30,0,0
     ,0,0,0,22,0,0,21,30,0,0,0,21,0,0,0
    },
    { 21,21,28,12,42,35,5,27,22,21,21,21,21,21,21,21,21,21,2,14,21
     ,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,13,8
     ,3,21,6,19,21,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21
     ,21,21,21,21,21,21,21,25,21,21,21,21,21,21,23,21,21,21,21,21
     ,21,21,21,21,21,22,21,21,21,21,21,21,21,21
    },
    { 24,24,28,12,42,35,5,27,23,24,24,24,24,24,24,24,24,24,2,14,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,13,8
     ,3,21,6,19,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,30,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,23,24,24,24,24,24,24,24,24
    },
    { 30,30,28,12,42,35,5,27,24,30,30,30,30,30,30,30,30,30,2,14,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,24,13,8
     ,3,21,6,19,30,24,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,24,30,30,30,30,30,30,30,30
    },
    { 30,30,28,12,42,35,5,27,25,30,30,30,30,30,30,30,30,30,2,14,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,25,13,8
     ,3,21,6,19,30,25,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,30,30,25,30,30,30,26,30,30,30,30,30
     ,30,30,30,30,30,25,30,30,30,30,30,30,30,30
    },
    { 30,30,28,12,42,35,5,27,26,30,30,30,30,30,30,30,30,30,2,14,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,26,13,8
     ,3,21,6,19,30,26,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,26,30,30,30,30,30,30,30,30
    },
    { 27,27,28,12,42,35,5,27,27,27,27,27,27,27,27,27,27,27,2,14,27
     ,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,13,8
     ,3,27,6,19,27,27,27,27,27,27,27,27,27,27,27,27,27,30,27,30
     ,27,27,27,27,27,27,27,25,27,30,27,27,27,27,24,27,30,27,27,27
     ,27,27,22,27,27,27,30,27,27,27,27,27,27,27
    },
    { 28,28,28,12,42,35,5,27,28,28,28,28,28,28,28,28,28,28,2,14,28
     ,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,13,8
     ,3,21,6,19,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,28,29,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,28,28,28,28,28,28,28
    },
    { 0,0,28,12,42,35,5,27,29,0,0,0,0,0,29,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,29,13,8,3,21,6,19,0,29,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,29,0,0,0,0,0,0,0,0
    },
    { 30,30,28,12,42,35,5,27,30,30,30,30,30,30,30,30,30,30,2,14,30
     ,27,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,13,8
     ,3,21,6,19,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,30,30,30,21,30,30,30,30,30,30,30,30
     ,30,30,21,30,30,30,30,30,30,30,21,30,30,30
    },
    { 32,0,28,12,42,35,5,27,31,32,0,0,0,0,32,0,0,31,2,14,32,0,33
     ,32,40,32,32,32,32,32,32,32,32,0,31,32,32,32,31,13,8,3,21,6
     ,19,0,0,45,0,0,32,38,32,32,0,32,32,0,34,32,34,32,44,32,0,0,0
     ,0,34,0,34,31,0,0,32,34,0,0,32,43,46,0,0,34,0,45,0,34,32,0,0
     ,0,0,32,38
    },
    { 0,0,28,12,42,35,5,27,32,0,0,0,0,0,0,0,0,32,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,32,0,0,0,32,13,8,3,21,6,19,0,32,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,32,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,33,0,32,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,33,13,8,3,21,6,19,0,33,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0
     ,0,0,32,0,33,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,34,0,32,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,34,13,8,3,21,6,19,0,34,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,34,0,0,0,0,0,0,0,0,0,0
     ,0,0,32,0,34,0,0,0,0,0,0,0,0
    },
    { 35,35,28,12,42,35,5,27,35,35,35,35,35,35,35,35,35,35,2,14,35
     ,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,13,8
     ,3,21,6,19,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
     ,35,35,35,35,35,35,35,35,36,35,35,35,35,35,35,35,35,35,35,35
     ,35,35,35,35,35,35,35,35,35,35,35,35,35,35
    },
    { 0,0,28,12,42,35,5,27,36,0,0,0,0,0,36,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,36,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,37,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,37,0,0,0,0,0,37,0,0,0,2,14,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,37,13,8,3,21,6,19,0,37,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,37,0,0,0,0,0,0,0,0
    },
    { 32,32,28,12,42,35,5,27,38,32,32,32,32,32,32,32,32,32,2,14,32
     ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,38,13,8
     ,3,21,6,19,32,38,32,32,32,32,32,32,32,39,32,32,32,32,32,32
     ,32,32,32,32,32,32,32,32,32,32,38,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,38,32,32,32,32,32,32,32,32
    },
    { 0,0,28,12,42,35,5,27,39,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,39,13,8,3,21,6,19,0,39,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,39,0,0,32,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,40,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,40,13,8,3,21,6,19,0,40,0,0,32,0,0,0,0
     ,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,41,0,0,0,0
     ,0,0,0,0,40,0,0,0,0,0,0,0,0
    },
    { 0,0,28,12,42,35,5,27,41,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,41,0,0,0,41,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0
     ,0,0,0,0,0,0,41,0,0,0,0,0
    },
    { 42,42,28,12,42,35,5,27,42,42,42,42,42,42,42,42,42,42,2,14,42
     ,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,13,8
     ,3,21,6,19,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42
     ,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42
     ,42,42,42,42,42,42,42,42,42,42,42,42,42,42
    },
    { 32,32,28,12,42,35,5,27,43,32,32,32,32,32,32,32,32,32,2,14,32
     ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,43,13,8
     ,3,21,6,19,32,43,32,32,32,32,32,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,32,32,32,32,32,43,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,43,32,32,32,32,32,32,32,32
    },
    { 32,44,28,12,44,35,5,27,44,32,32,44,44,32,32,32,32,32,2,14,32
     ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,44,13,8
     ,3,21,6,19,32,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,44,44,32,32,32,44,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,44,32,32,32,44,32,32,32,32
    },
    { 32,32,28,12,42,35,5,27,45,32,32,45,32,45,32,32,32,32,2,14,32
     ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,13,8
     ,3,21,6,19,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,45,45,32,32,32,45,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,45,32,32,32,32,32,45,32,32
    },
    { 32,32,28,12,42,35,5,27,46,32,32,46,32,32,32,32,32,32,2,14,32
     ,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,46,13,8
     ,3,21,6,19,32,46,32,32,32,32,32,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,46,46,32,32,32,46,32,32,32,32,32,32,32,32,32
     ,32,32,32,32,32,46,32,32,32,32,32,32,32,32
    },
    { 47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
     ,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
     ,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
     ,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
     ,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
    },
    { 0,0,28,12,42,35,5,27,48,0,0,0,0,0,0,0,0,0,2,14,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,48,13,8,3,21,6,19,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0
    }
};

static word _LR_action [49][95] =
{
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,6,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,7,0,0,0,0,12,8,8,8,8,8,9,3,0,0,0,0,0,2,0,0,0,0,0,5
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0
     ,1,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,16,0,0,0,12,8,8,8,8,8,9,0,15,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,14,0,13,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,17,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,18,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,10,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,20,0,0,23,0,0,0,0,0,0,0,0,0,0,0,19,0,0
     ,21,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,20,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,21,0,0,0,0,0,0,0,0
    },
    { 24,24,8,8,8,8,8,8,11,24,24,24,24,24,24,24,24,24,10,8,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,12,8,8,8,8
     ,8,9,24,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,20,24,24,23,24,24,24,24,24,24,24,24,24,24,24
     ,19,24,24,21,24,24,24,24,24,24,24,24
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,30,0,0,0,12,8,8,8,8,8,9,0,29,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0
     ,0,27,0,26,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,31,0,0,0,0,0,0,0,0,0,0,0,33,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,21,32,0,0,0,0,0,0,0
    },
    { 34,34,8,8,8,8,8,8,11,34,34,34,34,34,34,34,34,34,10,8,34,34
     ,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,12,8,8,8,8
     ,8,9,34,34,34,34,34,34,34,34,34,34,34,34,34,31,34,34,34,34
     ,34,34,34,34,34,31,34,34,34,34,34,34,34,34,34,34,34,34,34,34
     ,34,34,34,34,32,34,34,34,34,34,34,34
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,36,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 24,24,8,8,8,8,8,8,11,24,24,24,24,24,24,24,24,24,10,8,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,12,8,8,8,8
     ,8,9,24,22,24,24,24,24,24,24,24,24,24,24,24,31,24,24,24,24
     ,24,24,24,24,24,24,24,33,23,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,21,32,24,24,24,24,24,24,24
    },
    { 42,42,8,8,8,8,8,8,11,42,42,42,42,42,42,42,42,42,10,8,42,42
     ,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,12,8,8,8,8
     ,8,9,42,22,42,42,42,42,42,42,42,42,42,42,42,37,42,41,42,42
     ,42,42,42,42,42,38,42,37,23,42,42,42,40,42,42,42,42,42,42,42
     ,39,42,42,21,37,42,42,42,42,42,42,42
    },
    { 42,42,8,8,8,8,8,8,11,42,42,42,42,42,42,42,42,42,10,8,42,42
     ,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,12,8,8,8,8
     ,8,9,42,22,42,42,42,42,42,42,42,42,42,42,42,42,42,41,42,42
     ,42,42,42,42,42,42,42,42,23,42,42,42,43,42,42,42,42,42,42,42
     ,42,42,42,21,42,42,42,42,42,42,42,42
    },
    { 45,45,8,8,8,8,8,8,11,45,45,45,45,45,45,45,45,45,10,8,45,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8,8
     ,8,9,45,22,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,45,45,44,45,23,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,21,45,45,45,45,45,45,45,45
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,21,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,21,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0
    },
    { 48,48,8,8,8,8,8,8,11,48,48,48,48,48,48,48,48,48,10,8,48,48
     ,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,12,8,8,8,8
     ,8,9,48,22,48,48,48,48,48,48,48,48,48,48,48,47,48,48,48,48
     ,48,48,48,48,48,48,48,47,23,48,48,48,48,48,48,48,48,48,48,48
     ,48,48,48,21,47,48,48,48,48,48,48,48
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,51,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,52,0,50,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 55,55,8,8,8,8,8,8,11,55,55,55,55,55,55,55,55,55,10,8,55,55
     ,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,12,8,8,8,8
     ,8,9,55,52,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
     ,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
     ,55,55,55,55,54,55,53,55,55,55,55,55
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,59,0,59,0,0,0,0,0,0,0,58,60,59,23,0,0,0,21,0,56,0,0,0,0,0
     ,19,0,0,21,59,0,0,0,57,0,0,0
    },
    { 61,61,8,8,8,8,8,8,11,61,61,61,61,61,61,61,61,61,10,8,61,61
     ,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,12,8,8,8,8
     ,8,9,61,22,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61
     ,61,61,61,61,61,58,61,61,61,61,61,61,21,61,61,61,61,61,61,61
     ,61,61,61,21,61,61,61,61,61,61,61,61
    },
    { 63,63,8,8,8,8,8,8,11,63,63,63,63,63,63,63,63,63,10,8,63,63
     ,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,12,8,8,8,8
     ,8,9,63,22,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63
     ,63,63,63,63,63,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63
     ,63,63,63,21,63,63,63,63,63,63,63,63
    },
    { 65,65,8,8,8,8,8,8,11,65,65,65,65,65,65,65,65,65,10,8,65,65
     ,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,12,8,8,8,8
     ,8,9,65,22,65,65,65,65,65,65,65,65,65,65,65,64,65,65,65,65
     ,65,65,65,65,65,62,65,64,65,65,65,65,65,65,65,65,65,65,65,65
     ,65,65,65,21,64,65,65,65,65,65,65,65
    },
    { 67,67,8,8,8,8,8,8,11,67,67,67,67,67,67,67,67,67,10,8,67,67
     ,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,12,8,8,8,8
     ,8,9,67,22,67,67,67,67,67,67,67,67,67,67,67,67,67,66,67,67
     ,67,67,67,67,67,67,67,67,23,67,67,67,21,67,67,67,67,67,67,67
     ,67,67,67,21,67,67,67,67,67,67,67,67
    },
    { 45,45,8,8,8,8,8,8,11,45,45,45,45,45,45,45,45,45,10,8,45,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8,8
     ,8,9,45,22,45,45,45,45,45,45,45,45,45,45,45,69,45,45,45,45
     ,45,45,45,45,45,68,45,69,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,21,69,45,45,45,45,45,45,45
    },
    { 70,70,8,8,8,8,8,8,11,70,70,70,70,70,70,70,70,70,10,8,70,70
     ,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,12,8,8,8,8
     ,8,9,70,22,70,70,70,70,70,70,70,70,70,70,70,59,70,59,70,70
     ,70,70,70,70,70,58,60,59,23,70,70,70,21,70,56,70,70,70,70,70
     ,19,70,70,21,59,70,70,70,57,70,70,70
    },
    { 24,24,8,8,8,8,8,8,11,24,24,24,24,24,24,24,24,24,10,8,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,12,8,8,8,8
     ,8,9,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,71,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,73,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,72,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,21,0,0,0,0,0,0,0,0
    },
    { 70,70,8,8,8,8,8,8,11,70,70,70,70,70,75,70,70,70,10,8,70,74
     ,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,12,8,8,8,8
     ,8,9,70,22,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70
     ,70,70,70,70,70,70,70,70,23,74,70,70,70,70,70,70,70,70,70,70
     ,74,70,70,21,70,70,70,70,74,70,70,70
    },
    { 88,0,8,8,8,8,8,8,11,86,0,0,0,0,76,0,0,6,10,8,106,0,89,107,98
     ,87,77,104,79,82,78,81,83,0,6,80,101,84,12,8,8,8,8,8,9,0,0
     ,109,0,0,93,97,103,96,0,95,113,0,90,92,90,105,108,112,0,0,0
     ,0,90,0,90,23,0,0,85,90,0,0,94,102,110,0,0,91,0,114,0,90,100
     ,0,0,0,0,111,99
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,115,10,8,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,115,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,21,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,117,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,119,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0
     ,116,0,118,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,117,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,119,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,23,0,0,0,0,0,0,0,0,0,0,0,0
     ,116,0,118,0,0,0,0,0,0,0,0
    },
    { 24,24,8,8,8,8,8,8,11,24,24,24,24,24,24,24,24,24,10,8,24,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,12,8,8,8,8
     ,8,9,24,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,121,24,23,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,21,24,24,24,24,24,24,24,24
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,122,0,0,0,10,8,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,37,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,37,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,124,0,0,0,10,8,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,123,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,21,0,0,0,0,0,0,0,0
    },
    { 127,127,8,8,8,8,8,8,11,127,127,127,127,127,127,127,127,127
     ,10,8,127,127,127,127,127,127,127,127,127,127,127,127,127
     ,127,127,127,127,127,12,8,8,8,8,8,9,127,119,127,127,125,127
     ,127,127,127,126,127,127,127,127,127,127,127,127,127,127,127
     ,127,127,127,127,127,23,127,127,127,127,127,127,127,127,127
     ,127,127,127,127,127,118,127,127,127,127,127,127,127,127
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,22,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21
     ,0,0,128,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,119,0,0,125,0,0,0,0,126
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,129,0,0,0,0,0
     ,0,0,0,118,0,0,0,0,0,0,0,0
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,131,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,0,0,0
     ,0,0,0,130,0,0,0,0,0
    },
    { 24,135,8,8,8,8,8,8,11,24,24,136,134,24,24,24,24,24,10,8,24
     ,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,12,8,8,8
     ,8,8,9,24,119,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24
     ,24,24,24,24,118,24,24,24,133,24,24,24,24
    },
    { 45,45,8,8,8,8,8,8,11,45,45,137,45,45,45,45,45,45,10,8,45,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8,8
     ,8,9,45,119,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,45,45,45,45,23,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,118,45,45,45,45,45,45,45,45
    },
    { 45,135,8,8,8,8,8,8,11,45,45,136,134,45,45,45,45,45,10,8,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8
     ,8,8,9,45,119,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,138,139,45,45,45,23,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,45,118,45,45,45,133,45,45,45,45
    },
    { 45,45,8,8,8,8,8,8,11,45,45,140,45,142,45,45,45,45,10,8,45,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8,8
     ,8,9,45,119,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,138,139,45,45,45,23,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,118,45,45,45,45,45,141,45,45
    },
    { 45,45,8,8,8,8,8,8,11,45,45,140,45,45,45,45,45,45,10,8,45,45
     ,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,12,8,8,8,8
     ,8,9,45,119,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,138,139,45,45,45,23,45,45,45,45,45,45,45,45,45,45
     ,45,45,45,45,118,45,45,45,45,45,45,45,45
    },
    { 144,144,144,144,144,144,144,144,144,144,144,144,144,144,144
     ,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144
     ,144,144,144,143,144,144,144,144,144,144,144,144,144,144,144
     ,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144
     ,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144
     ,144,144,144,144,144,144,144,145,144,144,144,144,144,144,144
     ,144,144,144,144,144
    },
    { 0,0,8,8,8,8,8,8,11,0,0,0,0,0,0,0,0,0,10,8,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0
    }
};

#if (defined (SMT_PROFILE))
static word _LR_count [113];
static long _LR_time  [113];
static word _LR_flow  [49][95];
#endif

static word _LR_offset [] =
{
    0,
    0,
    6,
    12,
    15,
    18,
    22,
    26,
    30,
    32,
    38,
    40,
    45,
    49,
    53,
    56,
    62,
    67,
    69,
    72,
    76,
    80,
    83,
    87,
    90,
    93,
    99,
    103,
    106,
    112,
    116,
    119,
    123,
    126,
    129,
    133,
    137,
    140,
    144,
    148,
    154,
    161,
    168,
    172,
    176,
    182,
    185,
    191,
    197,
    203,
    208,
    213,
    217,
    221,
    225,
    228,
    233,
    237,
    242,
    248,
    257,
    261,
    267,
    276,
    281,
    296,
    300,
    310,
    316,
    325,
    339,
    343,
    349,
    355,
    360,
    365,
    369,
    372,
    375,
    378,
    383,
    388,
    393,
    398,
    403,
    406,
    411,
    416,
    421,
    426,
    433,
    441,
    450,
    458,
    466,
    471,
    479,
    484,
    487,
    490,
    494,
    499,
    502,
    508,
    513,
    518,
    525,
    532,
    539,
    546,
    553,
    559,
    564,
    569,
    574,
    581,
    585,
    592,
    599,
    602,
    606,
    611,
    614,
    617,
    623,
    627,
    632,
    635,
    642,
    645,
    649,
    653,
    656,
    661,
    666,
    671,
    676,
    681,
    686,
    691,
    694,
    699,
    704,
    709,
    714,
    719
};

static word _LR_vector [] =
{
    0,1,2,3,4,_LR_STOP,
    0,1,5,6,7,_LR_STOP,
    8,9,_LR_STOP,
    5,7,_LR_STOP,
    2,3,4,_LR_STOP,
    10,11,12,_LR_STOP,
    13,14,12,_LR_STOP,
    9,_LR_STOP,
    111,16,3,8,46,_LR_STOP,
    22,_LR_STOP,
    112,13,109,12,_LR_STOP,
    13,109,12,_LR_STOP,
    15,16,4,_LR_STOP,
    17,4,_LR_STOP,
    18,19,20,11,12,_LR_STOP,
    18,20,11,12,_LR_STOP,
    21,_LR_STOP,
    0,22,_LR_STOP,
    23,16,9,_LR_STOP,
    15,16,21,_LR_STOP,
    16,9,_LR_STOP,
    19,0,9,_LR_STOP,
    24,9,_LR_STOP,
    25,21,_LR_STOP,
    26,27,16,3,28,_LR_STOP,
    15,16,28,_LR_STOP,
    17,28,_LR_STOP,
    18,29,30,16,21,_LR_STOP,
    19,0,28,_LR_STOP,
    0,28,_LR_STOP,
    15,16,9,_LR_STOP,
    17,9,_LR_STOP,
    16,31,_LR_STOP,
    29,25,21,_LR_STOP,
    15,16,31,_LR_STOP,
    16,21,_LR_STOP,
    25,32,9,_LR_STOP,
    25,33,9,_LR_STOP,
    25,33,34,35,9,_LR_STOP,
    36,16,37,38,30,9,_LR_STOP,
    39,16,40,41,30,9,_LR_STOP,
    42,25,21,_LR_STOP,
    36,16,9,_LR_STOP,
    43,16,8,30,9,_LR_STOP,
    25,9,_LR_STOP,
    44,16,32,30,9,_LR_STOP,
    40,25,32,30,9,_LR_STOP,
    40,38,30,25,21,_LR_STOP,
    16,30,45,46,_LR_STOP,
    16,30,44,46,_LR_STOP,
    16,30,21,_LR_STOP,
    19,0,46,_LR_STOP,
    15,16,46,_LR_STOP,
    17,46,_LR_STOP,
    47,29,25,46,_LR_STOP,
    25,48,9,_LR_STOP,
    16,49,45,9,_LR_STOP,
    50,3,25,33,9,_LR_STOP,
    51,3,25,52,30,53,54,9,_LR_STOP,
    55,16,9,_LR_STOP,
    34,49,45,25,9,_LR_STOP,
    50,45,25,33,30,34,35,9,_LR_STOP,
    49,45,25,9,_LR_STOP,
    51,3,36,37,38,30,40,25,32,56,30,53,54,9,_LR_STOP,
    51,25,9,_LR_STOP,
    34,35,25,56,30,57,53,54,9,_LR_STOP,
    34,35,30,25,9,_LR_STOP,
    30,34,35,45,25,33,30,9,_LR_STOP,
    34,35,36,40,25,32,30,56,30,57,53,54,9,_LR_STOP,
    58,25,21,_LR_STOP,
    59,3,16,60,9,_LR_STOP,
    61,16,45,60,9,_LR_STOP,
    16,62,30,21,_LR_STOP,
    61,16,45,9,_LR_STOP,
    63,16,9,_LR_STOP,
    64,9,_LR_STOP,
    65,9,_LR_STOP,
    66,9,_LR_STOP,
    67,3,41,9,_LR_STOP,
    68,3,41,9,_LR_STOP,
    69,3,41,9,_LR_STOP,
    70,3,41,9,_LR_STOP,
    71,3,41,9,_LR_STOP,
    72,9,_LR_STOP,
    73,3,8,9,_LR_STOP,
    74,3,8,9,_LR_STOP,
    75,3,8,9,_LR_STOP,
    76,3,60,9,_LR_STOP,
    77,3,52,30,53,78,_LR_STOP,
    77,3,25,52,30,53,78,_LR_STOP,
    23,77,3,25,52,30,53,78,_LR_STOP,
    79,3,52,30,53,80,9,_LR_STOP,
    81,3,52,30,53,80,9,_LR_STOP,
    82,3,60,9,_LR_STOP,
    83,3,52,30,53,54,9,_LR_STOP,
    84,37,8,9,_LR_STOP,
    84,78,_LR_STOP,
    85,78,_LR_STOP,
    86,87,78,_LR_STOP,
    88,3,89,9,_LR_STOP,
    90,9,_LR_STOP,
    91,37,52,30,9,_LR_STOP,
    92,3,8,9,_LR_STOP,
    93,3,8,9,_LR_STOP,
    94,37,52,30,87,9,_LR_STOP,
    95,37,52,30,87,9,_LR_STOP,
    96,37,52,30,87,9,_LR_STOP,
    97,3,52,30,53,78,_LR_STOP,
    98,3,52,30,53,78,_LR_STOP,
    99,37,52,30,78,_LR_STOP,
    100,3,8,9,_LR_STOP,
    101,3,41,9,_LR_STOP,
    102,3,41,9,_LR_STOP,
    103,3,52,30,53,78,_LR_STOP,
    20,11,12,_LR_STOP,
    35,16,45,60,30,9,_LR_STOP,
    35,16,45,8,30,9,_LR_STOP,
    16,78,_LR_STOP,
    19,0,78,_LR_STOP,
    59,25,54,9,_LR_STOP,
    3,9,_LR_STOP,
    30,21,_LR_STOP,
    61,16,45,32,9,_LR_STOP,
    62,30,21,_LR_STOP,
    37,8,30,9,_LR_STOP,
    40,4,_LR_STOP,
    3,25,8,30,25,9,_LR_STOP,
    15,9,_LR_STOP,
    26,3,104,_LR_STOP,
    15,16,104,_LR_STOP,
    0,104,_LR_STOP,
    18,29,30,9,_LR_STOP,
    105,52,30,78,_LR_STOP,
    43,52,30,78,_LR_STOP,
    106,52,30,78,_LR_STOP,
    44,32,30,9,_LR_STOP,
    44,8,30,9,_LR_STOP,
    44,38,30,78,_LR_STOP,
    107,78,_LR_STOP,
    44,32,30,78,_LR_STOP,
    43,8,30,78,_LR_STOP,
    106,8,30,78,_LR_STOP,
    108,13,109,12,_LR_STOP,
    110,13,109,12,_LR_STOP,
    13,12,_LR_STOP
};

static HOOK *_LR_module [113] = {
    read_script_line,
    generate_script_exception,
    insert_line_node,
    ready_for_op1_field,
    get_template_token,
    generate_comment_exception,
    generate_line_exception,
    get_script_command_token,
    call_expect_operand,
    get_expression_token,
    insert_comment_node,
    return_ok_feedback,
    terminate_the_thread,
    rollback_memory_allocations,
    return_eof_feedback,
    insert_text_node,
    count_token_width,
    call_expect_substitute,
    insert_spaces_only_node,
    set_extend_flag,
    return_to_root_node,
    dialog_return,
    get_comment_token,
    save_the_sign,
    call_continue_comment,
    rewind_token,
    push_quote_character,
    insert_literal_node,
    get_quoted_token,
    return_to_string,
    return_to_parent,
    get_bracketed_identifier_token,
    call_expect_identifier,
    call_expect_number,
    restore_the_sign,
    copy_the_operator,
    insert_attribute_node,
    ready_for_scope_field,
    insert_empty_text_node,
    insert_member_node,
    ready_for_name_field,
    call_allow_identifier,
    return_to_data_specifier,
    ready_for_before_field,
    ready_for_as_field,
    ready_for_op2_field,
    get_modifier_token,
    insert_empty_node_if_needed,
    call_expect_string,
    insert_unary_operator_node,
    insert_number_node,
    insert_symbol_node,
    call_expect_data_specifier,
    separate_name_from_scope,
    call_allow_arguments,
    add_one_bracket,
    call_continue_data_specifier,
    change_number_to_symbol_node,
    return_to_expression,
    change_to_call_node,
    call_allow_operand,
    insert_operator_node,
    return_to_arguments,
    close_one_bracket,
    insert_close_node,
    insert_else_node,
    insert_end_if_node,
    insert_end_for_node,
    insert_end_scope_node,
    insert_end_macro_node,
    insert_end_function_node,
    insert_end_new_node,
    insert_end_while_node,
    insert_output_node,
    insert_append_node,
    insert_echo_node,
    insert_abort_node,
    insert_define_node,
    get_script_token,
    insert_macro_node,
    call_allow_macro_args,
    insert_function_node,
    insert_return_node,
    insert_call_node,
    insert_gsl_node,
    insert_direct_node,
    insert_xml_node,
    call_allow_locator,
    insert_template_node,
    call_allow_number,
    insert_end_template_node,
    insert_save_node,
    insert_if_node,
    insert_elsif_node,
    insert_move_node,
    insert_copy_node,
    insert_delete_node,
    insert_new_node,
    insert_for_node,
    insert_scope_node,
    insert_while_node,
    insert_next_node,
    insert_last_node,
    insert_sort_node,
    get_direct_quoted_token,
    ready_for_to_field,
    ready_for_after_field,
    unset_stacked_flag,
    signal_unexpected_end_of_file,
    return_error_feedback,
    signal_invalid_token,
    insert_substitute_node,
    signal_internal_error
};

#if (defined (DEBUG))
static char *_LR_mname [113] =
{
     "Read-Script-Line",
     "Generate-Script-Exception",
     "Insert-Line-Node",
     "Ready-For-Op1-Field",
     "Get-Template-Token",
     "Generate-Comment-Exception",
     "Generate-Line-Exception",
     "Get-Script-Command-Token",
     "Call-Expect-Operand",
     "Get-Expression-Token",
     "Insert-Comment-Node",
     "Return-Ok-Feedback",
     "Terminate-The-Thread",
     "Rollback-Memory-Allocations",
     "Return-Eof-Feedback",
     "Insert-Text-Node",
     "Count-Token-Width",
     "Call-Expect-Substitute",
     "Insert-Spaces-Only-Node",
     "Set-Extend-Flag",
     "Return-To-Root-Node",
     "Dialog-Return",
     "Get-Comment-Token",
     "Save-The-Sign",
     "Call-Continue-Comment",
     "Rewind-Token",
     "Push-Quote-Character",
     "Insert-Literal-Node",
     "Get-Quoted-Token",
     "Return-To-String",
     "Return-To-Parent",
     "Get-Bracketed-Identifier-Token",
     "Call-Expect-Identifier",
     "Call-Expect-Number",
     "Restore-The-Sign",
     "Copy-The-Operator",
     "Insert-Attribute-Node",
     "Ready-For-Scope-Field",
     "Insert-Empty-Text-Node",
     "Insert-Member-Node",
     "Ready-For-Name-Field",
     "Call-Allow-Identifier",
     "Return-To-Data-Specifier",
     "Ready-For-Before-Field",
     "Ready-For-As-Field",
     "Ready-For-Op2-Field",
     "Get-Modifier-Token",
     "Insert-Empty-Node-If-Needed",
     "Call-Expect-String",
     "Insert-Unary-Operator-Node",
     "Insert-Number-Node",
     "Insert-Symbol-Node",
     "Call-Expect-Data-Specifier",
     "Separate-Name-From-Scope",
     "Call-Allow-Arguments",
     "Add-One-Bracket",
     "Call-Continue-Data-Specifier",
     "Change-Number-To-Symbol-Node",
     "Return-To-Expression",
     "Change-To-Call-Node",
     "Call-Allow-Operand",
     "Insert-Operator-Node",
     "Return-To-Arguments",
     "Close-One-Bracket",
     "Insert-Close-Node",
     "Insert-Else-Node",
     "Insert-End-If-Node",
     "Insert-End-For-Node",
     "Insert-End-Scope-Node",
     "Insert-End-Macro-Node",
     "Insert-End-Function-Node",
     "Insert-End-New-Node",
     "Insert-End-While-Node",
     "Insert-Output-Node",
     "Insert-Append-Node",
     "Insert-Echo-Node",
     "Insert-Abort-Node",
     "Insert-Define-Node",
     "Get-Script-Token",
     "Insert-Macro-Node",
     "Call-Allow-Macro-Args",
     "Insert-Function-Node",
     "Insert-Return-Node",
     "Insert-Call-Node",
     "Insert-Gsl-Node",
     "Insert-Direct-Node",
     "Insert-Xml-Node",
     "Call-Allow-Locator",
     "Insert-Template-Node",
     "Call-Allow-Number",
     "Insert-End-Template-Node",
     "Insert-Save-Node",
     "Insert-If-Node",
     "Insert-Elsif-Node",
     "Insert-Move-Node",
     "Insert-Copy-Node",
     "Insert-Delete-Node",
     "Insert-New-Node",
     "Insert-For-Node",
     "Insert-Scope-Node",
     "Insert-While-Node",
     "Insert-Next-Node",
     "Insert-Last-Node",
     "Insert-Sort-Node",
     "Get-Direct-Quoted-Token",
     "Ready-For-To-Field",
     "Ready-For-After-Field",
     "Unset-Stacked-Flag",
     "Signal-Unexpected-End-Of-File",
     "Return-Error-Feedback",
     "Signal-Invalid-Token",
     "Insert-Substitute-Node",
     "Signal-Internal-Error"
};

static char *_LR_sname [49] =
{
     "After-Init",
     "Allow-Text",
     "Continue-Comment",
     "Expect-Signed-Number",
     "Expect-Unsigned-Number",
     "Allow-Number",
     "Expect-String",
     "Continue-String",
     "Expect-Identifier",
     "Continue-Identifier",
     "Expect-Bracketed-Identifier",
     "Continue-Bracketed-Identifier",
     "Allow-Identifier",
     "Expect-Data-Specifier",
     "Continue-Data-Specifier",
     "After-Member",
     "After-Member-Expression",
     "After-Member-As",
     "After-Scope-Point",
     "Expect-Substitute",
     "Expect-Modifier",
     "Expect-Operand",
     "After-Sign",
     "After-Sign-Point",
     "After-Point",
     "After-Number",
     "After-Number-Point",
     "Allow-Operand",
     "Allow-Arguments",
     "Continue-Arguments",
     "Allow-Operator",
     "Expect-Script",
     "Expect-End-Of-Line",
     "Expect-Assign",
     "Expect-Assign-Or-Args",
     "Allow-Macro-Args",
     "After-Open-Macro-Args",
     "Continue-Macro-Args",
     "Expect-Source",
     "Expect-Terminator",
     "Expect-Direct",
     "Continue-Direct",
     "Allow-Locator",
     "Expect-Save",
     "Expect-New",
     "Expect-For",
     "Expect-Scope",
     "Defaults",
     "Exceptions"
};

static char *_LR_ename [95] =
{
     "Abort-Event",
     "After-Event",
     "Allow-Arguments-Event",
     "Allow-Identifier-Event",
     "Allow-Locator-Event",
     "Allow-Macro-Args-Event",
     "Allow-Number-Event",
     "Allow-Operand-Event",
     "Anomaly-Event",
     "Append-Event",
     "Arithmetic-Assign-Event",
     "As-Event",
     "Before-Event",
     "By-Event",
     "Close-Event",
     "Close-Bracket-Event",
     "Close-Comment-Event",
     "Comment-Event",
     "Continue-Comment-Event",
     "Continue-Data-Specifier-Event",
     "Copy-Event",
     "Default-Operator-Event",
     "Define-Event",
     "Delete-Event",
     "Direct-Event",
     "Echo-Event",
     "Else-Event",
     "Elsif-Event",
     "End-For-Event",
     "End-Function-Event",
     "End-If-Event",
     "End-Macro-Event",
     "End-New-Event",
     "End-Of-File-Event",
     "End-Of-Line-Event",
     "End-Scope-Event",
     "End-Template-Event",
     "End-While-Event",
     "Error-Event",
     "Expect-Data-Specifier-Event",
     "Expect-Identifier-Event",
     "Expect-Number-Event",
     "Expect-Operand-Event",
     "Expect-String-Event",
     "Expect-Substitute-Event",
     "Expression-Event",
     "Extend-Event",
     "For-Event",
     "Format-Event",
     "From-Event",
     "Function-Event",
     "Gsl-Event",
     "If-Event",
     "Include-Event",
     "Incoming-Event",
     "Invoke-Event",
     "Last-Event",
     "Line-Event",
     "Literal-Event",
     "Macro-Event",
     "Member-Event",
     "Move-Event",
     "New-Event",
     "Next-Event",
     "Next-Arg-Event",
     "No-Bracket-Event",
     "Noalias-Event",
     "Nostack-Event",
     "Number-Event",
     "Open-Event",
     "Open-Bracket-Event",
     "Open-Comment-Event",
     "Operator-Event",
     "Other-Event",
     "Output-Event",
     "Point-Event",
     "Pretty-Event",
     "Quote-Event",
     "Return-Event",
     "Save-Event",
     "Scope-Event",
     "Script-Event",
     "Shutdown-Event",
     "Sign-Event",
     "Simple-Assign-Event",
     "Sort-Event",
     "Spaces-Event",
     "Substitute-Event",
     "Template-Event",
     "Text-Event",
     "To-Event",
     "Unary-Operator-Event",
     "Where-Event",
     "While-Event",
     "Xml-Event"
};
#else
static char *_LR_mname [113] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94",
     "95",
     "96",
     "97",
     "98",
     "99",
     "100",
     "101",
     "102",
     "103",
     "104",
     "105",
     "106",
     "107",
     "108",
     "109",
     "110",
     "111",
     "112"
};

static char *_LR_sname [49] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48"
};

static char *_LR_ename [95] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94"
};
#endif
MODULE dialog_return (THREAD *thread)
{
    _dialog_return (thread);
}

