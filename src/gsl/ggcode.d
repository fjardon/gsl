/*---------------------------------------------------------------------------*
 *  ggcode.d - LIBERO dialog data definitions for ggcode.c.                  *
 *  Generated by LIBERO 2.4 on  9 Sep, 2014, 21:58.                          *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define abort_event                     0
#define and_event                       1
#define anomaly_event                   2
#define append_event                    3
#define arithmetic_event                4
#define attribute_event                 5
#define build_count_list_event          6
#define build_list_event                7
#define build_member_list_event         8
#define call_event                      9
#define call_error_event                10
#define call_message_event              11
#define call_ok_event                   12
#define close_event                     13
#define comment_event                   14
#define comparison_event                15
#define continue_event                  16
#define copy_event                      17
#define default_event                   18
#define define_event                    19
#define delete_event                    20
#define dialog_return_event             21
#define direct_event                    22
#define echo_event                      23
#define else_event                      24
#define elsif_event                     25
#define end_for_event                   26
#define end_function_event              27
#define end_if_event                    28
#define end_macro_event                 29
#define end_new_event                   30
#define end_of_script_event             31
#define end_scope_event                 32
#define end_template_event              33
#define end_while_event                 34
#define error_event                     35
#define evaluate_event                  36
#define evaluate_call_event             37
#define evaluate_count_event            38
#define evaluate_reference_event        39
#define evaluate_simple_scope_event     40
#define exception_event                 41
#define execute_event                   42
#define execute_line_event              43
#define expression_event                44
#define false_event                     45
#define fatal_event                     46
#define finish_event                    47
#define for_event                       48
#define function_event                  49
#define function_call_event             50
#define gsl_event                       51
#define if_event                        52
#define iif_event                       53
#define last_event                      54
#define line_event                      55
#define literal_event                   56
#define load_script_file_event          57
#define load_script_text_event          58
#define macro_event                     59
#define member_event                    60
#define method_event                    61
#define move_event                      62
#define new_event                       63
#define next_event                      64
#define next_arg_event                  65
#define none_event                      66
#define number_event                    67
#define ok_event                        68
#define operator_event                  69
#define or_event                        70
#define output_event                    71
#define reference_event                 72
#define reject_event                    73
#define return_event                    74
#define save_event                      75
#define scope_event                     76
#define script_stack_empty_event        77
#define shutdown_event                  78
#define simple_scope_event              79
#define sort_event                      80
#define spawn_event                     81
#define start_event                     82
#define substitute_event                83
#define symbol_event                    84
#define template_event                  85
#define text_event                      86
#define true_event                      87
#define undefined_event                 88
#define value_event                     89
#define while_event                     90
#define xml_event                       91
#define _LR_STATE_after_init            0
#define _LR_STATE_starting              1
#define _LR_STATE_loading               2
#define _LR_STATE_stepping              3
#define _LR_STATE_continuing            4
#define _LR_STATE_coding                5
#define _LR_STATE_after_end_for         6
#define _LR_STATE_evaluating_call       7
#define _LR_STATE_evaluating            8
#define _LR_STATE_evaluating_define     9
#define _LR_STATE_building_list         10
#define _LR_STATE_building_count_list   11
#define _LR_STATE_building_member_list  12
#define _LR_STATE_iterating_loop        13
#define _LR_STATE_terminating_loop      14
#define _LR_STATE_testing_condition     15
#define _LR_STATE_finding_block         16
#define _LR_STATE_skipping_block        17
#define _LR_STATE_evaluating_parameters 18
#define _LR_STATE_after_calling_method  19
#define _LR_STATE_evaluating_simple_scope 20
#define _LR_STATE_evaluating_reference  21
#define _LR_STATE_parsing_expression    22
#define _LR_STATE_evaluating_operator   23
#define _LR_STATE_defaults              24
#define _LR_defaults_state              24


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE reset_error_occurrence       (THREAD *thread);
MODULE call_load_initial_script     (THREAD *thread);
MODULE raise_exception_if_error_occurred (THREAD *thread);
MODULE get_next_script_line         (THREAD *thread);
MODULE call_execute_script_line     (THREAD *thread);
MODULE generate_ok_event            (THREAD *thread);
MODULE call_accept_gsl_command      (THREAD *thread);
MODULE return_ok_feedback           (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE copy_output_buffer_to_output (THREAD *thread);
MODULE request_parse_expression     (THREAD *thread);
MODULE create_result_root           (THREAD *thread);
MODULE push_current_node            (THREAD *thread);
MODULE push_script_position         (THREAD *thread);
MODULE call_function_call_exception (THREAD *thread);
MODULE finish_exception_if_execute_full (THREAD *thread);
MODULE log_object_message           (THREAD *thread);
MODULE log_object_error             (THREAD *thread);
MODULE flag_error_occurrence        (THREAD *thread);
MODULE destroy_script_text          (THREAD *thread);
MODULE dialog_return                (THREAD *thread);
MODULE start_new_script             (THREAD *thread);
MODULE close_script_file            (THREAD *thread);
MODULE pop_script_position          (THREAD *thread);
MODULE free_result_root             (THREAD *thread);
MODULE return_error_feedback        (THREAD *thread);
MODULE call_evaluate_op1            (THREAD *thread);
MODULE copy_line_to_output          (THREAD *thread);
MODULE after_executing_line         (THREAD *thread);
MODULE call_evaluate_scope          (THREAD *thread);
MODULE lookup_scope_item            (THREAD *thread);
MODULE call_evaluate_name           (THREAD *thread);
MODULE generate_operator_type_event (THREAD *thread);
MODULE register_macro_or_function   (THREAD *thread);
MODULE skip_block                   (THREAD *thread);
MODULE close_output_file            (THREAD *thread);
MODULE open_file_for_output         (THREAD *thread);
MODULE open_file_for_append         (THREAD *thread);
MODULE call_prepare_to_interpret_gsl (THREAD *thread);
MODULE copy_direct_to_output        (THREAD *thread);
MODULE call_evaluate_as             (THREAD *thread);
MODULE call_evaluate_to             (THREAD *thread);
MODULE lookup_to_item               (THREAD *thread);
MODULE call_evaluate_before         (THREAD *thread);
MODULE lookup_before_item           (THREAD *thread);
MODULE call_evaluate_after          (THREAD *thread);
MODULE lookup_after_item            (THREAD *thread);
MODULE load_source_xml              (THREAD *thread);
MODULE call_build_iteration_list    (THREAD *thread);
MODULE sort_the_items               (THREAD *thread);
MODULE destroy_for_block            (THREAD *thread);
MODULE initialise_for_block         (THREAD *thread);
MODULE generate_block_end_node_type_event (THREAD *thread);
MODULE initialise_scope_block       (THREAD *thread);
MODULE confirm_op1_name_is_correct  (THREAD *thread);
MODULE close_the_scope              (THREAD *thread);
MODULE skip_block_if_condition_false (THREAD *thread);
MODULE go_to_top_of_block           (THREAD *thread);
MODULE go_to_top_of_named_block     (THREAD *thread);
MODULE generate_node_type_event     (THREAD *thread);
MODULE generate_condition_event     (THREAD *thread);
MODULE echo_text_to_console         (THREAD *thread);
MODULE invoke_abort_handler         (THREAD *thread);
MODULE copy_the_item                (THREAD *thread);
MODULE delete_the_item              (THREAD *thread);
MODULE move_the_item                (THREAD *thread);
MODULE save_the_item                (THREAD *thread);
MODULE initialise_new_block         (THREAD *thread);
MODULE call_evaluate_call           (THREAD *thread);
MODULE pickup_call_result           (THREAD *thread);
MODULE generate_call_type_event     (THREAD *thread);
MODULE save_return_value            (THREAD *thread);
MODULE close_macro_block            (THREAD *thread);
MODULE pop_current_node             (THREAD *thread);
MODULE dialog_pop                   (THREAD *thread);
MODULE iterate_for_loop             (THREAD *thread);
MODULE get_first_parameter          (THREAD *thread);
MODULE initialise_macro_block       (THREAD *thread);
MODULE call_evaluate_op2            (THREAD *thread);
MODULE evaluate_substitute_node     (THREAD *thread);
MODULE finish_evaluating_node       (THREAD *thread);
MODULE evaluate_literal_node        (THREAD *thread);
MODULE evaluate_number_node         (THREAD *thread);
MODULE lookup_optional_scope_item   (THREAD *thread);
MODULE raise_exception_if_no_scope_class (THREAD *thread);
MODULE evaluate_symbol_node         (THREAD *thread);
MODULE call_build_member_iteration_list (THREAD *thread);
MODULE evaluate_member_node         (THREAD *thread);
MODULE evaluate_text_node           (THREAD *thread);
MODULE define_symbol_as_node_op2_result (THREAD *thread);
MODULE prepare_define_expression    (THREAD *thread);
MODULE evaluate_arithmetic_operator (THREAD *thread);
MODULE define_symbol_as_node_result (THREAD *thread);
MODULE raise_exception_if_symbol_is_defined (THREAD *thread);
MODULE reject_if_where_clause_false (THREAD *thread);
MODULE save_sort_key_value          (THREAD *thread);
MODULE get_next_child               (THREAD *thread);
MODULE kill_previous_scope_item     (THREAD *thread);
MODULE open_count_alias_block       (THREAD *thread);
MODULE close_count_alias_block      (THREAD *thread);
MODULE call_evaluate_the_parameter  (THREAD *thread);
MODULE get_next_parameter           (THREAD *thread);
MODULE call_evaluate_the_reference_parameter (THREAD *thread);
MODULE insert_null_result_node      (THREAD *thread);
MODULE call_evaluate_the_simple_scope_parameter (THREAD *thread);
MODULE evaluate_call_method_node    (THREAD *thread);
MODULE node_scope_must_be_null      (THREAD *thread);
MODULE copy_result_from_name        (THREAD *thread);
MODULE node_op2_must_be_null        (THREAD *thread);
MODULE report_illegal_parameter     (THREAD *thread);
MODULE call_evaluate_parser_result  (THREAD *thread);
MODULE free_parse_result            (THREAD *thread);
MODULE return_parser_error          (THREAD *thread);
MODULE concatenate_operands         (THREAD *thread);
MODULE return_op1_if_defined        (THREAD *thread);
MODULE return_op2                   (THREAD *thread);
MODULE evaluate_comparison_operator (THREAD *thread);
MODULE return_true_if_op1_true      (THREAD *thread);
MODULE return_false_if_op1_false    (THREAD *thread);
MODULE return_if_op1_false          (THREAD *thread);
MODULE check_for_shutdown_request   (THREAD *thread);
MODULE before_executing_line        (THREAD *thread);
MODULE request_load_script_file     (THREAD *thread);
MODULE request_load_script_text     (THREAD *thread);
MODULE begin_evaluating_node        (THREAD *thread);
MODULE build_fake_for_node          (THREAD *thread);
MODULE call_build_count_iteration_list (THREAD *thread);
MODULE save_total_as_result         (THREAD *thread);
MODULE destroy_fake_for_node        (THREAD *thread);
MODULE get_first_child              (THREAD *thread);
MODULE signal_internal_error        (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [25][92] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,3,0,0,0,0,22,0,0,0,0,3,0,0,0,0,0,1,0,0,4,4,0,0,0,0,0,0,0
     ,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,3,0,0,0,0,22,0,0,0,0,3,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0
     ,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,4,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 3,0,0,5,0,0,0,0,0,5,0,0,0,5,5,0,0,5,0,9,5,0,5,5,17,17,6,5,5
     ,5,5,0,5,5,5,0,0,7,0,0,0,5,0,0,0,0,0,0,5,5,0,5,15,0,14,5,0,0
     ,0,5,0,0,5,5,13,0,0,0,0,0,0,5,0,0,5,5,5,0,0,0,5,0,0,0,0,5,0
     ,0,0,0,5,5
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
     ,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0
     ,8,0,0,0,0,0,0,8,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,8,0,0
     ,0,0,0
    },
    { 0,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,10,0,10,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,11,0,11,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,12,0,12,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,13,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,14,0,0
     ,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,15,0,0,16
     ,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,0
     ,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,19,0,0,0,0,0,18,0,0,0,0,0,0,18,0,0,0,0,0,0,0
     ,0,0,18,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0
     ,0,0,0,0,0,0,0,0,20,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0
     ,0,0,0,0,0,0,0,0,21,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,23,0,0,23,0,0,0,0,0,0,0,0,0,0,23,0,0,23,0,0,23,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0
     ,0,0,0,0,0,0,0,0,23,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,23,0,0,0
    },
    { 0,0,24,0,0,0,11,10,12,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,24,8,0,24,21,20,24,0,5,0,0,24,24,0,0,0,0,0,0
     ,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    }
};

static word _LR_action [25][92] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,5,0,0,0,0,0,0,0,0,0,5,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,6,0,0,0,0,11,0,0,0,0,14,0,0,0,0,0,15,0,0,13,10,0,0,0,0,0
     ,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,17,16,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,19,0,0,0,0,11,0,0,0,0,23,0,0,0,0,0,0,0,0,13,21,0,0,0,0,0
     ,0,0,0,0,0,0,0,20,0,0,0,6,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,24,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0
    },
    { 49,0,0,32,0,0,0,0,0,55,0,0,0,36,28,0,0,50,0,29,51,0,34,48,47
     ,47,39,58,28,58,41,0,41,28,43,0,0,56,0,0,0,59,0,0,0,0,0,0,38
     ,30,0,33,46,0,45,27,0,0,0,30,0,0,52,54,44,0,0,0,0,0,0,31,0,0
     ,57,53,40,0,0,0,37,0,0,0,0,28,0,0,0,0,42,35
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,60,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,62,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,66,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,69,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64
     ,0,0,0,67,0,0,0,0,0,0,65,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,63
     ,66,0,71,0,0,0,0,0
    },
    { 0,74,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,73,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,78,0,76,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,78,0,79,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,78,0,80,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,81,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,42,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,82,0,0
     ,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,46,0,0,28
     ,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,60,0
     ,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,89,0,0,0,0,0,86,0,0,0,0,0,0,88,0,0,0,0,0,0,0
     ,0,0,85,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,91,90,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0
     ,0,0,0,0,0,0,0,0,93,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0
     ,0,0,0,0,0,0,0,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,97,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,104,0,0,100,0,0,0,0,0,0,0,0,0,0,102,0,0,101,0,0,107,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0
     ,105,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,103,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,99,0,0,0
    },
    { 0,0,116,0,0,0,114,114,115,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,117,111,0,113,112,112,78,0,108,0,0,15
     ,15,0,0,0,0,0,0,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,116,15,0,0,0,0,0,0,0,0,0,0,0,0,0
    }
};

#if (defined (SMT_PROFILE))
static word _LR_count [131];
static long _LR_time  [131];
static word _LR_flow  [25][92];
#endif

static word _LR_offset [] =
{
    0,
    0,
    8,
    10,
    18,
    23,
    26,
    28,
    31,
    38,
    45,
    52,
    54,
    62,
    66,
    70,
    72,
    74,
    79,
    83,
    89,
    93,
    101,
    110,
    113,
    120,
    124,
    128,
    136,
    139,
    148,
    159,
    169,
    179,
    191,
    203,
    229,
    234,
    251,
    267,
    269,
    281,
    291,
    299,
    308,
    316,
    325,
    331,
    334,
    342,
    352,
    376,
    386,
    410,
    422,
    448,
    460,
    463,
    476,
    483,
    487,
    498,
    500,
    508,
    519,
    526,
    535,
    547,
    564,
    575,
    580,
    582,
    587,
    590,
    597,
    607,
    615,
    624,
    628,
    630,
    639,
    644,
    648,
    652,
    657,
    661,
    665,
    669,
    672,
    676,
    679,
    681,
    684,
    693,
    702,
    706,
    716,
    722,
    726,
    730,
    739,
    749,
    759,
    768,
    779,
    790,
    800,
    808,
    812,
    816,
    818,
    820,
    825,
    829,
    843,
    846,
    851,
    854
};

static word _LR_vector [] =
{
    0,1,2,3,4,2,5,_LR_STOP,
    0,_LR_STOP,
    0,6,2,3,4,2,5,_LR_STOP,
    3,4,2,5,_LR_STOP,
    7,8,_LR_STOP,
    7,_LR_STOP,
    9,7,_LR_STOP,
    1,2,3,4,2,5,_LR_STOP,
    1,2,3,4,2,7,_LR_STOP,
    6,2,3,4,2,5,_LR_STOP,
    10,_LR_STOP,
    11,12,13,3,14,2,7,_LR_STOP,
    4,2,5,_LR_STOP,
    15,0,7,_LR_STOP,
    8,_LR_STOP,
    16,_LR_STOP,
    17,18,19,20,_LR_STOP,
    19,21,20,_LR_STOP,
    22,23,3,4,2,_LR_STOP,
    3,4,2,_LR_STOP,
    13,6,2,3,4,2,5,_LR_STOP,
    11,12,13,3,14,24,2,7,_LR_STOP,
    0,7,_LR_STOP,
    22,23,3,4,2,5,_LR_STOP,
    9,7,15,_LR_STOP,
    25,15,0,_LR_STOP,
    11,26,2,27,24,28,20,_LR_STOP,
    28,20,_LR_STOP,
    11,29,2,30,2,31,2,32,_LR_STOP,
    11,29,2,31,2,33,34,24,28,20,_LR_STOP,
    9,11,26,2,35,36,24,28,20,_LR_STOP,
    9,11,26,2,35,37,24,28,20,_LR_STOP,
    11,26,2,29,2,13,38,2,24,28,20,_LR_STOP,
    11,26,2,29,2,31,2,39,24,28,20,_LR_STOP,
    11,26,2,29,2,31,2,40,2,41,2,42,2,43,2,44,2,45,2,46,2,47,24
    ,28,20,_LR_STOP,
    9,35,28,20,_LR_STOP,
    11,29,2,30,2,31,2,40,2,48,2,49,50,24,28,20,_LR_STOP,
    11,29,2,30,2,31,2,40,2,48,2,51,24,28,20,_LR_STOP,
    52,_LR_STOP,
    11,29,2,30,2,40,2,53,24,28,20,_LR_STOP,
    11,26,2,54,2,24,55,28,20,_LR_STOP,
    11,26,2,56,24,28,20,_LR_STOP,
    11,57,26,2,56,24,28,20,_LR_STOP,
    11,26,2,58,2,24,59,_LR_STOP,
    11,26,2,58,2,24,34,59,_LR_STOP,
    11,26,2,60,2,_LR_STOP,
    34,59,_LR_STOP,
    11,26,2,61,24,28,20,_LR_STOP,
    11,26,2,61,24,62,7,28,15,_LR_STOP,
    11,29,2,30,2,40,2,41,2,42,2,43,2,44,2,45,2,46,2,63,24,28,20,_LR_STOP,
    11,29,2,30,2,64,24,28,20,_LR_STOP,
    11,29,2,30,2,40,2,41,2,42,2,43,2,44,2,45,2,46,2,65,24,28,20,_LR_STOP,
    11,29,2,30,2,40,2,66,24,28,20,_LR_STOP,
    11,29,2,30,2,31,2,40,2,41,2,42,2,43,2,44,2,45,2,46,2,67,24
    ,28,20,_LR_STOP,
    11,29,2,31,2,68,2,69,24,28,20,_LR_STOP,
    70,2,_LR_STOP,
    11,26,2,71,72,2,24,23,73,74,28,20,_LR_STOP,
    72,23,73,74,28,20,_LR_STOP,
    24,28,20,_LR_STOP,
    11,26,2,54,2,57,24,75,28,20,_LR_STOP,
    76,_LR_STOP,
    26,2,12,13,77,2,5,_LR_STOP,
    26,2,78,2,40,2,79,80,73,20,_LR_STOP,
    26,2,81,80,73,20,_LR_STOP,
    26,2,78,2,82,80,73,20,_LR_STOP,
    29,2,31,2,83,2,84,85,80,73,20,_LR_STOP,
    29,2,31,2,83,2,84,40,2,86,2,87,80,50,73,20,_LR_STOP,
    29,2,31,2,68,2,69,80,73,20,_LR_STOP,
    12,70,2,73,_LR_STOP,
    32,_LR_STOP,
    88,80,73,20,_LR_STOP,
    73,20,_LR_STOP,
    78,2,89,24,28,20,_LR_STOP,
    78,2,90,91,2,92,24,28,20,_LR_STOP,
    93,78,2,89,24,28,20,_LR_STOP,
    43,2,94,45,2,95,96,2,_LR_STOP,
    96,97,2,_LR_STOP,
    20,_LR_STOP,
    98,43,2,99,94,96,97,2,_LR_STOP,
    43,2,94,20,_LR_STOP,
    75,28,20,_LR_STOP,
    50,28,20,_LR_STOP,
    50,34,28,20,_LR_STOP,
    24,34,59,_LR_STOP,
    100,2,101,_LR_STOP,
    102,2,101,_LR_STOP,
    103,101,_LR_STOP,
    104,2,101,_LR_STOP,
    105,2,_LR_STOP,
    17,_LR_STOP,
    17,20,_LR_STOP,
    106,2,31,2,107,80,73,20,_LR_STOP,
    108,2,26,2,82,80,73,20,_LR_STOP,
    109,73,20,_LR_STOP,
    29,2,30,2,31,2,80,73,20,_LR_STOP,
    110,2,7,111,15,_LR_STOP,
    112,111,15,_LR_STOP,
    25,111,15,_LR_STOP,
    26,2,78,2,113,80,73,20,_LR_STOP,
    26,2,78,2,91,2,80,73,20,_LR_STOP,
    26,2,114,78,2,115,80,73,20,_LR_STOP,
    26,2,78,2,116,80,73,20,_LR_STOP,
    26,2,117,78,2,91,2,80,73,20,_LR_STOP,
    26,2,118,78,2,91,2,80,73,20,_LR_STOP,
    26,2,119,78,2,115,80,73,20,_LR_STOP,
    26,2,78,2,80,73,20,_LR_STOP,
    80,73,20,_LR_STOP,
    120,121,59,_LR_STOP,
    122,_LR_STOP,
    123,_LR_STOP,
    120,12,124,59,_LR_STOP,
    12,124,59,_LR_STOP,
    125,29,2,30,2,31,2,126,2,127,50,128,20,_LR_STOP,
    129,2,_LR_STOP,
    12,129,2,73,_LR_STOP,
    130,8,_LR_STOP,
    18,20,_LR_STOP
};

static HOOK *_LR_module [131] = {
    reset_error_occurrence,
    call_load_initial_script,
    raise_exception_if_error_occurred,
    get_next_script_line,
    call_execute_script_line,
    generate_ok_event,
    call_accept_gsl_command,
    return_ok_feedback,
    terminate_the_thread,
    copy_output_buffer_to_output,
    request_parse_expression,
    create_result_root,
    push_current_node,
    push_script_position,
    call_function_call_exception,
    finish_exception_if_execute_full,
    log_object_message,
    log_object_error,
    flag_error_occurrence,
    destroy_script_text,
    dialog_return,
    start_new_script,
    close_script_file,
    pop_script_position,
    free_result_root,
    return_error_feedback,
    call_evaluate_op1,
    copy_line_to_output,
    after_executing_line,
    call_evaluate_scope,
    lookup_scope_item,
    call_evaluate_name,
    generate_operator_type_event,
    register_macro_or_function,
    skip_block,
    close_output_file,
    open_file_for_output,
    open_file_for_append,
    call_prepare_to_interpret_gsl,
    copy_direct_to_output,
    call_evaluate_as,
    call_evaluate_to,
    lookup_to_item,
    call_evaluate_before,
    lookup_before_item,
    call_evaluate_after,
    lookup_after_item,
    load_source_xml,
    call_build_iteration_list,
    sort_the_items,
    destroy_for_block,
    initialise_for_block,
    generate_block_end_node_type_event,
    initialise_scope_block,
    confirm_op1_name_is_correct,
    close_the_scope,
    skip_block_if_condition_false,
    go_to_top_of_block,
    go_to_top_of_named_block,
    generate_node_type_event,
    generate_condition_event,
    echo_text_to_console,
    invoke_abort_handler,
    copy_the_item,
    delete_the_item,
    move_the_item,
    save_the_item,
    initialise_new_block,
    call_evaluate_call,
    pickup_call_result,
    generate_call_type_event,
    save_return_value,
    close_macro_block,
    pop_current_node,
    dialog_pop,
    iterate_for_loop,
    get_first_parameter,
    initialise_macro_block,
    call_evaluate_op2,
    evaluate_substitute_node,
    finish_evaluating_node,
    evaluate_literal_node,
    evaluate_number_node,
    lookup_optional_scope_item,
    raise_exception_if_no_scope_class,
    evaluate_symbol_node,
    call_build_member_iteration_list,
    evaluate_member_node,
    evaluate_text_node,
    define_symbol_as_node_op2_result,
    prepare_define_expression,
    evaluate_arithmetic_operator,
    define_symbol_as_node_result,
    raise_exception_if_symbol_is_defined,
    reject_if_where_clause_false,
    save_sort_key_value,
    get_next_child,
    kill_previous_scope_item,
    open_count_alias_block,
    close_count_alias_block,
    call_evaluate_the_parameter,
    get_next_parameter,
    call_evaluate_the_reference_parameter,
    insert_null_result_node,
    call_evaluate_the_simple_scope_parameter,
    evaluate_call_method_node,
    node_scope_must_be_null,
    copy_result_from_name,
    node_op2_must_be_null,
    report_illegal_parameter,
    call_evaluate_parser_result,
    free_parse_result,
    return_parser_error,
    concatenate_operands,
    return_op1_if_defined,
    return_op2,
    evaluate_comparison_operator,
    return_true_if_op1_true,
    return_false_if_op1_false,
    return_if_op1_false,
    check_for_shutdown_request,
    before_executing_line,
    request_load_script_file,
    request_load_script_text,
    begin_evaluating_node,
    build_fake_for_node,
    call_build_count_iteration_list,
    save_total_as_result,
    destroy_fake_for_node,
    get_first_child,
    signal_internal_error
};

#if (defined (DEBUG))
static char *_LR_mname [131] =
{
     "Reset-Error-Occurrence",
     "Call-Load-Initial-Script",
     "Raise-Exception-If-Error-Occurred",
     "Get-Next-Script-Line",
     "Call-Execute-Script-Line",
     "Generate-Ok-Event",
     "Call-Accept-Gsl-Command",
     "Return-Ok-Feedback",
     "Terminate-The-Thread",
     "Copy-Output-Buffer-To-Output",
     "Request-Parse-Expression",
     "Create-Result-Root",
     "Push-Current-Node",
     "Push-Script-Position",
     "Call-Function-Call-Exception",
     "Finish-Exception-If-Execute-Full",
     "Log-Object-Message",
     "Log-Object-Error",
     "Flag-Error-Occurrence",
     "Destroy-Script-Text",
     "Dialog-Return",
     "Start-New-Script",
     "Close-Script-File",
     "Pop-Script-Position",
     "Free-Result-Root",
     "Return-Error-Feedback",
     "Call-Evaluate-Op1",
     "Copy-Line-To-Output",
     "After-Executing-Line",
     "Call-Evaluate-Scope",
     "Lookup-Scope-Item",
     "Call-Evaluate-Name",
     "Generate-Operator-Type-Event",
     "Register-Macro-Or-Function",
     "Skip-Block",
     "Close-Output-File",
     "Open-File-For-Output",
     "Open-File-For-Append",
     "Call-Prepare-To-Interpret-Gsl",
     "Copy-Direct-To-Output",
     "Call-Evaluate-As",
     "Call-Evaluate-To",
     "Lookup-To-Item",
     "Call-Evaluate-Before",
     "Lookup-Before-Item",
     "Call-Evaluate-After",
     "Lookup-After-Item",
     "Load-Source-Xml",
     "Call-Build-Iteration-List",
     "Sort-The-Items",
     "Destroy-For-Block",
     "Initialise-For-Block",
     "Generate-Block-End-Node-Type-Event",
     "Initialise-Scope-Block",
     "Confirm-Op1-Name-Is-Correct",
     "Close-The-Scope",
     "Skip-Block-If-Condition-False",
     "Go-To-Top-Of-Block",
     "Go-To-Top-Of-Named-Block",
     "Generate-Node-Type-Event",
     "Generate-Condition-Event",
     "Echo-Text-To-Console",
     "Invoke-Abort-Handler",
     "Copy-The-Item",
     "Delete-The-Item",
     "Move-The-Item",
     "Save-The-Item",
     "Initialise-New-Block",
     "Call-Evaluate-Call",
     "Pickup-Call-Result",
     "Generate-Call-Type-Event",
     "Save-Return-Value",
     "Close-Macro-Block",
     "Pop-Current-Node",
     "Dialog-Pop",
     "Iterate-For-Loop",
     "Get-First-Parameter",
     "Initialise-Macro-Block",
     "Call-Evaluate-Op2",
     "Evaluate-Substitute-Node",
     "Finish-Evaluating-Node",
     "Evaluate-Literal-Node",
     "Evaluate-Number-Node",
     "Lookup-Optional-Scope-Item",
     "Raise-Exception-If-No-Scope-Class",
     "Evaluate-Symbol-Node",
     "Call-Build-Member-Iteration-List",
     "Evaluate-Member-Node",
     "Evaluate-Text-Node",
     "Define-Symbol-As-Node-Op2-Result",
     "Prepare-Define-Expression",
     "Evaluate-Arithmetic-Operator",
     "Define-Symbol-As-Node-Result",
     "Raise-Exception-If-Symbol-Is-Defined",
     "Reject-If-Where-Clause-False",
     "Save-Sort-Key-Value",
     "Get-Next-Child",
     "Kill-Previous-Scope-Item",
     "Open-Count-Alias-Block",
     "Close-Count-Alias-Block",
     "Call-Evaluate-The-Parameter",
     "Get-Next-Parameter",
     "Call-Evaluate-The-Reference-Parameter",
     "Insert-Null-Result-Node",
     "Call-Evaluate-The-Simple-Scope-Parameter",
     "Evaluate-Call-Method-Node",
     "Node-Scope-Must-Be-Null",
     "Copy-Result-From-Name",
     "Node-Op2-Must-Be-Null",
     "Report-Illegal-Parameter",
     "Call-Evaluate-Parser-Result",
     "Free-Parse-Result",
     "Return-Parser-Error",
     "Concatenate-Operands",
     "Return-Op1-If-Defined",
     "Return-Op2",
     "Evaluate-Comparison-Operator",
     "Return-True-If-Op1-True",
     "Return-False-If-Op1-False",
     "Return-If-Op1-False",
     "Check-For-Shutdown-Request",
     "Before-Executing-Line",
     "Request-Load-Script-File",
     "Request-Load-Script-Text",
     "Begin-Evaluating-Node",
     "Build-Fake-For-Node",
     "Call-Build-Count-Iteration-List",
     "Save-Total-As-Result",
     "Destroy-Fake-For-Node",
     "Get-First-Child",
     "Signal-Internal-Error"
};

static char *_LR_sname [25] =
{
     "After-Init",
     "Starting",
     "Loading",
     "Stepping",
     "Continuing",
     "Coding",
     "After-End-For",
     "Evaluating-Call",
     "Evaluating",
     "Evaluating-Define",
     "Building-List",
     "Building-Count-List",
     "Building-Member-List",
     "Iterating-Loop",
     "Terminating-Loop",
     "Testing-Condition",
     "Finding-Block",
     "Skipping-Block",
     "Evaluating-Parameters",
     "After-Calling-Method",
     "Evaluating-Simple-Scope",
     "Evaluating-Reference",
     "Parsing-Expression",
     "Evaluating-Operator",
     "Defaults"
};

static char *_LR_ename [92] =
{
     "Abort-Event",
     "And-Event",
     "Anomaly-Event",
     "Append-Event",
     "Arithmetic-Event",
     "Attribute-Event",
     "Build-Count-List-Event",
     "Build-List-Event",
     "Build-Member-List-Event",
     "Call-Event",
     "Call-Error-Event",
     "Call-Message-Event",
     "Call-Ok-Event",
     "Close-Event",
     "Comment-Event",
     "Comparison-Event",
     "Continue-Event",
     "Copy-Event",
     "Default-Event",
     "Define-Event",
     "Delete-Event",
     "Dialog-Return-Event",
     "Direct-Event",
     "Echo-Event",
     "Else-Event",
     "Elsif-Event",
     "End-For-Event",
     "End-Function-Event",
     "End-If-Event",
     "End-Macro-Event",
     "End-New-Event",
     "End-Of-Script-Event",
     "End-Scope-Event",
     "End-Template-Event",
     "End-While-Event",
     "Error-Event",
     "Evaluate-Event",
     "Evaluate-Call-Event",
     "Evaluate-Count-Event",
     "Evaluate-Reference-Event",
     "Evaluate-Simple-Scope-Event",
     "Exception-Event",
     "Execute-Event",
     "Execute-Line-Event",
     "Expression-Event",
     "False-Event",
     "Fatal-Event",
     "Finish-Event",
     "For-Event",
     "Function-Event",
     "Function-Call-Event",
     "Gsl-Event",
     "If-Event",
     "Iif-Event",
     "Last-Event",
     "Line-Event",
     "Literal-Event",
     "Load-Script-File-Event",
     "Load-Script-Text-Event",
     "Macro-Event",
     "Member-Event",
     "Method-Event",
     "Move-Event",
     "New-Event",
     "Next-Event",
     "Next-Arg-Event",
     "None-Event",
     "Number-Event",
     "Ok-Event",
     "Operator-Event",
     "Or-Event",
     "Output-Event",
     "Reference-Event",
     "Reject-Event",
     "Return-Event",
     "Save-Event",
     "Scope-Event",
     "Script-Stack-Empty-Event",
     "Shutdown-Event",
     "Simple-Scope-Event",
     "Sort-Event",
     "Spawn-Event",
     "Start-Event",
     "Substitute-Event",
     "Symbol-Event",
     "Template-Event",
     "Text-Event",
     "True-Event",
     "Undefined-Event",
     "Value-Event",
     "While-Event",
     "Xml-Event"
};
#else
static char *_LR_mname [131] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94",
     "95",
     "96",
     "97",
     "98",
     "99",
     "100",
     "101",
     "102",
     "103",
     "104",
     "105",
     "106",
     "107",
     "108",
     "109",
     "110",
     "111",
     "112",
     "113",
     "114",
     "115",
     "116",
     "117",
     "118",
     "119",
     "120",
     "121",
     "122",
     "123",
     "124",
     "125",
     "126",
     "127",
     "128",
     "129",
     "130"
};

static char *_LR_sname [25] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24"
};

static char *_LR_ename [92] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91"
};
#endif
MODULE dialog_return (THREAD *thread)
{
    _dialog_return (thread);
}

MODULE dialog_pop (THREAD *thread)
{
    _dialog_pop (thread);
}

